{
  "version": 3,
  "sources": ["../../../../encore.gen/internal/entrypoints/combined/main.ts", "../../../../auth/google-oauth.ts", "../../../../auth/db.ts", "../../../../auth/utils.ts", "../../../../auth/mock-data.ts", "../../../../auth/login.ts", "../../../../auth/refresh.ts", "../../../../auth/register.ts", "../../../../auth/session.ts", "../../../../chat/get-history.ts", "../../../../chat/db.ts", "../../../../chat/send-message.ts", "../../../../chat/utils.ts", "../../../../google-ads/auth-callback.ts", "../../../../google-ads/db.ts", "../../../../google-ads/utils.ts", "../../../../google-ads/auth-start.ts", "../../../../google-ads/get-insights.ts", "../../../../google-ads/get-performance.ts", "../../../../google-ads/list-campaigns.ts", "../../../../health/health.ts", "../../../../chat/encore.service.ts", "../../../../auth/encore.service.ts", "../../../../google-ads/encore.service.ts", "../../../../health/encore.service.ts"],
  "sourcesContent": ["import { registerGateways, registerHandlers, run, type Handler } from \"encore.dev/internal/codegen/appinit\";\n\nimport { googleLogin as auth_googleLoginImpl0 } from \"../../../../auth/google-oauth\";\nimport { googleCallback as auth_googleCallbackImpl1 } from \"../../../../auth/google-oauth\";\nimport { login as auth_loginImpl2 } from \"../../../../auth/login\";\nimport { refresh as auth_refreshImpl3 } from \"../../../../auth/refresh\";\nimport { register as auth_registerImpl4 } from \"../../../../auth/register\";\nimport { getCurrentUser as auth_getCurrentUserImpl5 } from \"../../../../auth/session\";\nimport { logout as auth_logoutImpl6 } from \"../../../../auth/session\";\nimport { getHistory as chat_getHistoryImpl7 } from \"../../../../chat/get-history\";\nimport { sendMessage as chat_sendMessageImpl8 } from \"../../../../chat/send-message\";\nimport { authCallback as google_ads_authCallbackImpl9 } from \"../../../../google-ads/auth-callback\";\nimport { authStart as google_ads_authStartImpl10 } from \"../../../../google-ads/auth-start\";\nimport { getInsights as google_ads_getInsightsImpl11 } from \"../../../../google-ads/get-insights\";\nimport { getPerformance as google_ads_getPerformanceImpl12 } from \"../../../../google-ads/get-performance\";\nimport { listCampaigns as google_ads_listCampaignsImpl13 } from \"../../../../google-ads/list-campaigns\";\nimport { health as health_healthImpl14 } from \"../../../../health/health\";\nimport * as chat_service from \"../../../../chat/encore.service\";\nimport * as auth_service from \"../../../../auth/encore.service\";\nimport * as google_ads_service from \"../../../../google-ads/encore.service\";\nimport * as health_service from \"../../../../health/encore.service\";\n\nconst gateways: any[] = [\n];\n\nconst handlers: Handler[] = [\n    {\n        apiRoute: {\n            service:           \"auth\",\n            name:              \"googleLogin\",\n            handler:           auth_googleLoginImpl0,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: auth_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"auth\",\n            name:              \"googleCallback\",\n            handler:           auth_googleCallbackImpl1,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: auth_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"auth\",\n            name:              \"login\",\n            handler:           auth_loginImpl2,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: auth_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"auth\",\n            name:              \"refresh\",\n            handler:           auth_refreshImpl3,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: auth_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"auth\",\n            name:              \"register\",\n            handler:           auth_registerImpl4,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: auth_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"auth\",\n            name:              \"getCurrentUser\",\n            handler:           auth_getCurrentUserImpl5,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: auth_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"auth\",\n            name:              \"logout\",\n            handler:           auth_logoutImpl6,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: auth_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"chat\",\n            name:              \"getHistory\",\n            handler:           chat_getHistoryImpl7,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: chat_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"chat\",\n            name:              \"sendMessage\",\n            handler:           chat_sendMessageImpl8,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: chat_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"google-ads\",\n            name:              \"authCallback\",\n            handler:           google_ads_authCallbackImpl9,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: google_ads_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"google-ads\",\n            name:              \"authStart\",\n            handler:           google_ads_authStartImpl10,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: google_ads_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"google-ads\",\n            name:              \"getInsights\",\n            handler:           google_ads_getInsightsImpl11,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: google_ads_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"google-ads\",\n            name:              \"getPerformance\",\n            handler:           google_ads_getPerformanceImpl12,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: google_ads_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"google-ads\",\n            name:              \"listCampaigns\",\n            handler:           google_ads_listCampaignsImpl13,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: google_ads_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"health\",\n            name:              \"health\",\n            handler:           health_healthImpl14,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: health_service.default.cfg.middlewares || [],\n    },\n];\n\nregisterGateways(gateways);\nregisterHandlers(handlers);\n\nawait run(import.meta.url);\n", "import { api, APIError } from \"encore.dev/api\";\nimport { authDB } from \"./db\";\nimport type { GoogleOAuthRequest, AuthResponse, User, Organization } from \"./types\";\nimport { \n  generateGoogleOAuthUrl, \n  exchangeGoogleAuthCode, \n  getGoogleUserProfile,\n  generateAccessToken, \n  generateRefreshToken,\n  generateRandomState,\n  isDataModeMock \n} from \"./utils\";\nimport { mockUsers, mockOrganizations, findOrganizationById } from \"./mock-data\";\n\n// Initiates Google OAuth login flow\nexport const googleLogin = api<void, { redirect_url: string; state: string }>(\n  { expose: true, method: \"GET\", path: \"/api/v1/auth/google/login\" },\n  async () => {\n    const state = generateRandomState();\n    const redirectUrl = generateGoogleOAuthUrl(state);\n    \n    return {\n      redirect_url: redirectUrl,\n      state\n    };\n  }\n);\n\n// Handles Google OAuth callback\nexport const googleCallback = api<GoogleOAuthRequest, AuthResponse>(\n  { expose: true, method: \"POST\", path: \"/api/v1/auth/google/callback\" },\n  async (req) => {\n    if (!req.auth_code) {\n      throw APIError.invalidArgument(\"Authorization code is required\");\n    }\n\n    try {\n      // Exchange authorization code for tokens\n      const tokenResponse = await exchangeGoogleAuthCode(req.auth_code);\n      \n      // Get user profile from Google\n      const googleProfile = await getGoogleUserProfile(tokenResponse.access_token);\n      \n      if (!googleProfile.email || !googleProfile.verified_email) {\n        throw APIError.invalidArgument(\"Email verification required\");\n      }\n\n      if (isDataModeMock()) {\n        // Mock mode - find or create user in mock data\n        let user = mockUsers.find(u => u.email === googleProfile.email);\n        \n        if (!user) {\n          // Create new mock user with default organization\n          const defaultOrg = mockOrganizations[0];\n          user = {\n            id: `google-mock-${Date.now()}`,\n            email: googleProfile.email,\n            first_name: googleProfile.given_name,\n            last_name: googleProfile.family_name,\n            org_id: defaultOrg.id,\n            role: \"viewer\", // Default role for OAuth users\n            created_at: new Date(),\n            updated_at: new Date(),\n            is_active: true\n          };\n          mockUsers.push(user);\n        }\n\n        // Get user's organization\n        const organization = findOrganizationById(user.org_id) || mockOrganizations[0];\n\n        const accessToken = generateAccessToken(user.id, user.email);\n        const refreshToken = generateRefreshToken(user.id, user.email);\n\n        return {\n          access_token: accessToken,\n          refresh_token: refreshToken,\n          user,\n          organization,\n          expires_in: 3600\n        };\n      }\n\n      // Live mode - database operations\n      let user: User | null;\n\n      // Check if user exists\n      user = await authDB.queryRow<User>`\n        SELECT id, email, first_name, last_name, org_id, role, created_at, updated_at, last_login, is_active\n        FROM users \n        WHERE email = ${googleProfile.email}\n      `;\n\n      let organization: Organization;\n\n      if (!user) {\n        // Find or create default organization for new OAuth users\n        let defaultOrg = await authDB.queryRow<Organization>`\n          SELECT id, name, created_at, updated_at FROM organizations WHERE name = 'Default Organization'\n        `;\n        \n        if (!defaultOrg) {\n          defaultOrg = await authDB.queryRow<Organization>`\n            INSERT INTO organizations (name)\n            VALUES ('Default Organization')\n            RETURNING id, name, created_at, updated_at\n          `;\n        }\n        \n        if (!defaultOrg) {\n          throw APIError.internal(\"Failed to create default organization\");\n        }\n        \n        organization = defaultOrg;\n\n        // Create new user from Google profile\n        user = await authDB.queryRow<User>`\n          INSERT INTO users (email, first_name, last_name, org_id, role, is_active)\n          VALUES (${googleProfile.email}, ${googleProfile.given_name || null}, ${googleProfile.family_name || null}, ${organization.id}, 'viewer', true)\n          RETURNING id, email, first_name, last_name, org_id, role, created_at, updated_at, last_login, is_active\n        `;\n\n        if (!user) {\n          throw APIError.internal(\"Failed to create user from Google profile\");\n        }\n      } else {\n        // Get existing user's organization\n        const existingOrg = await authDB.queryRow<Organization>`\n          SELECT id, name, created_at, updated_at FROM organizations WHERE id = ${user.org_id}\n        `;\n        \n        if (!existingOrg) {\n          throw APIError.internal(\"User's organization not found\");\n        }\n        \n        organization = existingOrg;\n        \n        // Update last login\n        await authDB.exec`\n          UPDATE users \n          SET last_login = NOW(), updated_at = NOW()\n          WHERE id = ${user.id}\n        `;\n      }\n\n      const accessToken = generateAccessToken(user.id, user.email);\n      const refreshToken = generateRefreshToken(user.id, user.email);\n\n      return {\n        access_token: accessToken,\n        refresh_token: refreshToken,\n        user,\n        organization,\n        expires_in: 3600\n      };\n\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      console.error(\"Google OAuth callback error:\", error);\n      throw APIError.internal(\"OAuth authentication failed\");\n    }\n  }\n);", "import { SQLDatabase } from \"encore.dev/storage/sqldb\";\n\nexport const authDB = new SQLDatabase(\"auth\", {\n  migrations: \"./migrations\",\n});\n", "import * as crypto from \"crypto\";\nimport * as jwt from \"jsonwebtoken\";\nimport { secret } from \"encore.dev/config\";\nimport { APIError } from \"encore.dev/api\";\nimport type { TokenPayload, GoogleTokenResponse, GoogleUserProfile } from \"./types\";\n\nconst jwtSecret = secret(\"JWT_SECRET\");\nconst jwtRefreshSecret = secret(\"JWT_REFRESH_SECRET\");\nconst dataMode = secret(\"DATA_MODE\");\nconst googleClientId = secret(\"GOOGLE_CLIENT_ID\");\nconst googleClientSecret = secret(\"GOOGLE_CLIENT_SECRET\");\nconst googleRedirectUri = secret(\"GOOGLE_REDIRECT_URI\");\n\nexport function hashPassword(password: string): string {\n  const salt = crypto.randomBytes(16).toString(\"hex\");\n  const hash = crypto.pbkdf2Sync(password, salt, 10000, 64, \"sha512\").toString(\"hex\");\n  return `${salt}:${hash}`;\n}\n\nexport function verifyPassword(password: string, hashedPassword: string): boolean {\n  const [salt, hash] = hashedPassword.split(\":\");\n  const verifyHash = crypto.pbkdf2Sync(password, salt, 10000, 64, \"sha512\").toString(\"hex\");\n  return hash === verifyHash;\n}\n\nexport function generateAccessToken(userId: string, email: string): string {\n  const payload: TokenPayload = {\n    user_id: userId,\n    email,\n    exp: Math.floor(Date.now() / 1000) + (60 * 60), // 1 hour\n    iat: Math.floor(Date.now() / 1000)\n  };\n  \n  return jwt.sign(payload, jwtSecret(), { algorithm: \"HS256\" });\n}\n\nexport function generateRefreshToken(userId: string, email: string): string {\n  const payload: TokenPayload = {\n    user_id: userId,\n    email,\n    exp: Math.floor(Date.now() / 1000) + (60 * 60 * 24 * 30), // 30 days as per Cleopatra requirements\n    iat: Math.floor(Date.now() / 1000)\n  };\n  \n  return jwt.sign(payload, jwtRefreshSecret(), { algorithm: \"HS256\" });\n}\n\nexport function verifyAccessToken(token: string): TokenPayload {\n  try {\n    return jwt.verify(token, jwtSecret()) as TokenPayload;\n  } catch (error) {\n    throw APIError.unauthenticated(\"Invalid access token\");\n  }\n}\n\nexport function verifyRefreshToken(token: string): TokenPayload {\n  try {\n    return jwt.verify(token, jwtRefreshSecret()) as TokenPayload;\n  } catch (error) {\n    throw APIError.unauthenticated(\"Invalid refresh token\");\n  }\n}\n\nexport function isDataModeMock(): boolean {\n  return dataMode() === \"MOCK\";\n}\n\nexport function validateEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nexport function validatePassword(password: string): boolean {\n  return password.length >= 8;\n}\n\nexport function generateGoogleOAuthUrl(state?: string): string {\n  if (isDataModeMock()) {\n    return \"https://mock-google-oauth.example.com\";\n  }\n\n  const params = new URLSearchParams({\n    client_id: googleClientId(),\n    redirect_uri: googleRedirectUri(),\n    scope: \"openid profile email\",\n    response_type: \"code\",\n    access_type: \"offline\",\n    prompt: \"consent\",\n    ...(state && { state })\n  });\n\n  return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n}\n\nexport async function exchangeGoogleAuthCode(authCode: string): Promise<GoogleTokenResponse> {\n  if (isDataModeMock()) {\n    return {\n      access_token: \"mock-google-access-token\",\n      refresh_token: \"mock-google-refresh-token\",\n      expires_in: 3600,\n      token_type: \"Bearer\",\n      scope: \"openid profile email\",\n      id_token: \"mock-id-token\"\n    };\n  }\n\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      client_id: googleClientId(),\n      client_secret: googleClientSecret(),\n      code: authCode,\n      grant_type: \"authorization_code\",\n      redirect_uri: googleRedirectUri()\n    })\n  });\n\n  if (!response.ok) {\n    throw APIError.invalidArgument(\"Failed to exchange authorization code\");\n  }\n\n  return await response.json();\n}\n\nexport async function getGoogleUserProfile(accessToken: string): Promise<GoogleUserProfile> {\n  if (isDataModeMock()) {\n    return {\n      id: \"mock-google-user-id\",\n      email: \"user@example.com\",\n      verified_email: true,\n      name: \"Mock User\",\n      given_name: \"Mock\",\n      family_name: \"User\",\n      picture: \"https://via.placeholder.com/150\"\n    };\n  }\n\n  const response = await fetch(`https://www.googleapis.com/oauth2/v2/userinfo?access_token=${accessToken}`);\n  \n  if (!response.ok) {\n    throw APIError.unauthenticated(\"Failed to fetch user profile\");\n  }\n\n  return await response.json();\n}\n\nexport function generateRandomState(): string {\n  return crypto.randomBytes(32).toString(\"hex\");\n}\n", "import type { User, Organization } from \"./types\";\n\nexport const mockOrganizations: Organization[] = [\n  {\n    id: \"mock-org-1\",\n    name: \"War Room Demo Organization\",\n    created_at: new Date(\"2024-01-01T00:00:00Z\"),\n    updated_at: new Date(\"2024-01-01T00:00:00Z\")\n  }\n];\n\nexport const mockUsers: User[] = [\n  {\n    id: \"550e8400-e29b-41d4-a716-446655440000\",\n    email: \"admin@warroom.com\",\n    first_name: \"War Room\",\n    last_name: \"Admin\",\n    org_id: \"mock-org-1\",\n    role: \"admin\",\n    created_at: new Date(\"2024-01-01T00:00:00Z\"),\n    updated_at: new Date(\"2024-01-01T00:00:00Z\"),\n    last_login: new Date(\"2024-01-15T10:30:00Z\"),\n    is_active: true\n  },\n  {\n    id: \"550e8400-e29b-41d4-a716-446655440001\",\n    email: \"user@warroom.com\",\n    first_name: \"Test\",\n    last_name: \"User\",\n    org_id: \"mock-org-1\",\n    role: \"analyst\",\n    created_at: new Date(\"2024-01-02T00:00:00Z\"),\n    updated_at: new Date(\"2024-01-02T00:00:00Z\"),\n    last_login: new Date(\"2024-01-14T15:45:00Z\"),\n    is_active: true\n  }\n];\n\nexport const mockPasswordHash = \"mockSalt:mockHash123\"; // For demo purposes only\n\nexport function findOrganizationById(id: string): Organization | undefined {\n  return mockOrganizations.find(org => org.id === id);\n}\n\nexport function findOrganizationByName(name: string): Organization | undefined {\n  return mockOrganizations.find(org => org.name === name);\n}\n\nexport function createMockOrganization(name: string): Organization {\n  const newOrg: Organization = {\n    id: `mock-org-${Date.now()}`,\n    name,\n    created_at: new Date(),\n    updated_at: new Date()\n  };\n  \n  mockOrganizations.push(newOrg);\n  return newOrg;\n}\n", "import { api, APIError } from \"encore.dev/api\";\nimport { authDB } from \"./db\";\nimport type { LoginRequest, AuthResponse, User, Organization } from \"./types\";\nimport { verifyPassword, generateAccessToken, generateRefreshToken, validateEmail, isDataModeMock } from \"./utils\";\nimport { mockUsers, mockPasswordHash, findOrganizationById } from \"./mock-data\";\n\ninterface UserWithPassword extends User {\n  password_hash: string;\n}\n\n// Authenticates a user and returns access tokens.\nexport const login = api<LoginRequest, AuthResponse>(\n  { expose: true, method: \"POST\", path: \"/api/v1/auth/login\" },\n  async (req) => {\n    // Validate input\n    if (!validateEmail(req.email)) {\n      throw APIError.invalidArgument(\"Invalid email format\");\n    }\n\n    if (!req.password) {\n      throw APIError.invalidArgument(\"Password is required\");\n    }\n\n    if (isDataModeMock()) {\n      // Mock mode - check credentials\n      const user = mockUsers.find(u => u.email === req.email && u.is_active);\n      if (!user || req.password !== \"mockpassword\") {\n        throw APIError.unauthenticated(\"Invalid email or password\");\n      }\n\n      const organization = findOrganizationById(user.org_id);\n      if (!organization) {\n        throw APIError.internal(\"User's organization not found\");\n      }\n\n      const accessToken = generateAccessToken(user.id, user.email);\n      const refreshToken = generateRefreshToken(user.id, user.email);\n\n      return {\n        access_token: accessToken,\n        refresh_token: refreshToken,\n        user,\n        organization,\n        expires_in: 3600\n      };\n    }\n\n    // Live mode - database operations\n    try {\n      const userWithPassword = await authDB.queryRow<UserWithPassword>`\n        SELECT id, email, password_hash, first_name, last_name, org_id, role, created_at, updated_at, last_login, is_active\n        FROM users \n        WHERE email = ${req.email} AND is_active = true\n      `;\n\n      if (!userWithPassword) {\n        throw APIError.unauthenticated(\"Invalid email or password\");\n      }\n\n      if (!verifyPassword(req.password, userWithPassword.password_hash)) {\n        throw APIError.unauthenticated(\"Invalid email or password\");\n      }\n\n      // Update last login\n      await authDB.exec`\n        UPDATE users \n        SET last_login = NOW(), updated_at = NOW()\n        WHERE id = ${userWithPassword.id}\n      `;\n\n      // Get user's organization\n      const organization = await authDB.queryRow<Organization>`\n        SELECT id, name, created_at, updated_at FROM organizations WHERE id = ${userWithPassword.org_id}\n      `;\n      \n      if (!organization) {\n        throw APIError.internal(\"User's organization not found\");\n      }\n\n      const user: User = {\n        id: userWithPassword.id,\n        email: userWithPassword.email,\n        first_name: userWithPassword.first_name,\n        last_name: userWithPassword.last_name,\n        org_id: userWithPassword.org_id,\n        role: userWithPassword.role,\n        created_at: userWithPassword.created_at,\n        updated_at: userWithPassword.updated_at,\n        last_login: new Date(),\n        is_active: userWithPassword.is_active\n      };\n\n      const accessToken = generateAccessToken(user.id, user.email);\n      const refreshToken = generateRefreshToken(user.id, user.email);\n\n      return {\n        access_token: accessToken,\n        refresh_token: refreshToken,\n        user,\n        organization,\n        expires_in: 3600\n      };\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      throw APIError.internal(\"Login failed\");\n    }\n  }\n);\n", "import { api, APIError } from \"encore.dev/api\";\nimport { authDB } from \"./db\";\nimport type { RefreshRequest, AuthResponse, User, Organization } from \"./types\";\nimport { verifyRefreshToken, generateAccessToken, generateRefreshToken, isDataModeMock } from \"./utils\";\nimport { mockUsers, findOrganizationById } from \"./mock-data\";\n\n// Refreshes an access token using a valid refresh token.\nexport const refresh = api<RefreshRequest, AuthResponse>(\n  { expose: true, method: \"POST\", path: \"/api/v1/auth/refresh\" },\n  async (req) => {\n    if (!req.refresh_token) {\n      throw APIError.invalidArgument(\"Refresh token is required\");\n    }\n\n    try {\n      const payload = verifyRefreshToken(req.refresh_token);\n\n      if (isDataModeMock()) {\n        // Mock mode - find user in mock data\n        const user = mockUsers.find(u => u.id === payload.user_id && u.is_active);\n        if (!user) {\n          throw APIError.unauthenticated(\"User not found or inactive\");\n        }\n\n        const organization = findOrganizationById(user.org_id);\n        if (!organization) {\n          throw APIError.internal(\"User's organization not found\");\n        }\n\n        const accessToken = generateAccessToken(user.id, user.email);\n        const refreshToken = generateRefreshToken(user.id, user.email);\n\n        return {\n          access_token: accessToken,\n          refresh_token: refreshToken,\n          user,\n          organization,\n          expires_in: 3600\n        };\n      }\n\n      // Live mode - database operations\n      const user = await authDB.queryRow<User>`\n        SELECT id, email, first_name, last_name, org_id, role, created_at, updated_at, last_login, is_active\n        FROM users \n        WHERE id = ${payload.user_id} AND is_active = true\n      `;\n\n      if (!user) {\n        throw APIError.unauthenticated(\"User not found or inactive\");\n      }\n\n      // Get user's organization\n      const organization = await authDB.queryRow<Organization>`\n        SELECT id, name, created_at, updated_at FROM organizations WHERE id = ${user.org_id}\n      `;\n      \n      if (!organization) {\n        throw APIError.internal(\"User's organization not found\");\n      }\n\n      const accessToken = generateAccessToken(user.id, user.email);\n      const refreshToken = generateRefreshToken(user.id, user.email);\n\n      return {\n        access_token: accessToken,\n        refresh_token: refreshToken,\n        user,\n        organization,\n        expires_in: 3600\n      };\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      throw APIError.internal(\"Token refresh failed\");\n    }\n  }\n);\n", "import { api, APIError } from \"encore.dev/api\";\nimport { authDB } from \"./db\";\nimport type { RegisterRequest, AuthResponse, User, Organization, UserRole } from \"./types\";\nimport { hashPassword, generateAccessToken, generateRefreshToken, validateEmail, validatePassword, isDataModeMock } from \"./utils\";\nimport { mockUsers, mockOrganizations, mockPasswordHash, findOrganizationByName, createMockOrganization } from \"./mock-data\";\n\n// Registers a new user account.\nexport const register = api<RegisterRequest, AuthResponse>(\n  { expose: true, method: \"POST\", path: \"/api/v1/auth/register\" },\n  async (req) => {\n    // Validate input\n    if (!validateEmail(req.email)) {\n      throw APIError.invalidArgument(\"Invalid email format\");\n    }\n    \n    if (!validatePassword(req.password)) {\n      throw APIError.invalidArgument(\"Password must be at least 8 characters long\");\n    }\n\n    if (isDataModeMock()) {\n      // Mock mode - check if user already exists in mock data\n      const existingUser = mockUsers.find(u => u.email === req.email);\n      if (existingUser) {\n        throw APIError.alreadyExists(\"User with this email already exists\");\n      }\n\n      // Handle organization creation/assignment in mock mode\n      let organization: Organization;\n      \n      if (req.organization_name) {\n        // Create new organization or find existing\n        const existingOrg = findOrganizationByName(req.organization_name);\n        organization = existingOrg || createMockOrganization(req.organization_name);\n      } else {\n        // Use default organization\n        organization = mockOrganizations[0];\n      }\n\n      // Create mock user\n      const newUser: User = {\n        id: `mock-${Date.now()}`,\n        email: req.email,\n        first_name: req.first_name,\n        last_name: req.last_name,\n        org_id: organization.id,\n        role: req.user_role || \"viewer\",\n        created_at: new Date(),\n        updated_at: new Date(),\n        is_active: true\n      };\n\n      mockUsers.push(newUser);\n\n      const accessToken = generateAccessToken(newUser.id, newUser.email);\n      const refreshToken = generateRefreshToken(newUser.id, newUser.email);\n\n      return {\n        access_token: accessToken,\n        refresh_token: refreshToken,\n        user: newUser,\n        organization,\n        expires_in: 3600\n      };\n    }\n\n    // Live mode - database operations\n    const hashedPassword = hashPassword(req.password);\n    const userRole: UserRole = req.user_role || \"viewer\";\n\n    try {\n      // Check if user already exists\n      const existingUser = await authDB.queryRow<{ id: string }>`\n        SELECT id FROM users WHERE email = ${req.email}\n      `;\n\n      if (existingUser) {\n        throw APIError.alreadyExists(\"User with this email already exists\");\n      }\n\n      // Handle organization creation/assignment\n      let organization: Organization;\n      \n      if (req.organization_name) {\n        // Check if organization exists\n        const existingOrg = await authDB.queryRow<Organization>`\n          SELECT id, name, created_at, updated_at FROM organizations WHERE name = ${req.organization_name}\n        `;\n        \n        if (existingOrg) {\n          organization = existingOrg;\n        } else {\n          // Create new organization\n          const newOrg = await authDB.queryRow<Organization>`\n            INSERT INTO organizations (name)\n            VALUES (${req.organization_name})\n            RETURNING id, name, created_at, updated_at\n          `;\n          \n          if (!newOrg) {\n            throw APIError.internal(\"Failed to create organization\");\n          }\n          organization = newOrg;\n        }\n      } else {\n        // Find or create default organization\n        let defaultOrg = await authDB.queryRow<Organization>`\n          SELECT id, name, created_at, updated_at FROM organizations WHERE name = 'Default Organization'\n        `;\n        \n        if (!defaultOrg) {\n          defaultOrg = await authDB.queryRow<Organization>`\n            INSERT INTO organizations (name)\n            VALUES ('Default Organization')\n            RETURNING id, name, created_at, updated_at\n          `;\n        }\n        \n        if (!defaultOrg) {\n          throw APIError.internal(\"Failed to create default organization\");\n        }\n        organization = defaultOrg;\n      }\n\n      // Create new user with organization and role\n      const newUser = await authDB.queryRow<User>`\n        INSERT INTO users (email, password_hash, first_name, last_name, org_id, role)\n        VALUES (${req.email}, ${hashedPassword}, ${req.first_name || null}, ${req.last_name || null}, ${organization.id}, ${userRole})\n        RETURNING id, email, first_name, last_name, org_id, role, created_at, updated_at, last_login, is_active\n      `;\n\n      if (!newUser) {\n        throw APIError.internal(\"Failed to create user\");\n      }\n\n      const accessToken = generateAccessToken(newUser.id, newUser.email);\n      const refreshToken = generateRefreshToken(newUser.id, newUser.email);\n\n      return {\n        access_token: accessToken,\n        refresh_token: refreshToken,\n        user: newUser,\n        organization,\n        expires_in: 3600\n      };\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      throw APIError.internal(\"Registration failed\");\n    }\n  }\n);\n", "import { api, APIError } from \"encore.dev/api\";\nimport { Header } from \"encore.dev/api\";\nimport { authDB } from \"./db\";\nimport type { User, Organization } from \"./types\";\nimport { verifyAccessToken, isDataModeMock } from \"./utils\";\nimport { mockUsers, findOrganizationById } from \"./mock-data\";\n\n// Gets current user information from access token\nexport const getCurrentUser = api<void, { user: User; organization: Organization }>(\n  { expose: true, method: \"GET\", path: \"/api/v1/auth/me\" },\n  async (req) => {\n    // Extract Bearer token from Authorization header\n    const authHeader = Header(\"Authorization\");\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n      throw APIError.unauthenticated(\"Authorization header required\");\n    }\n\n    const token = authHeader.substring(7); // Remove \"Bearer \" prefix\n    \n    try {\n      // Verify and decode the access token\n      const payload = verifyAccessToken(token);\n      \n      if (isDataModeMock()) {\n        // Mock mode - find user in mock data\n        const user = mockUsers.find(u => u.id === payload.user_id);\n        if (!user) {\n          throw APIError.unauthenticated(\"User not found\");\n        }\n        \n        const organization = findOrganizationById(user.org_id);\n        if (!organization) {\n          throw APIError.internal(\"User's organization not found\");\n        }\n        \n        return { user, organization };\n      }\n\n      // Live mode - get user from database\n      const user = await authDB.queryRow<User>`\n        SELECT id, email, first_name, last_name, org_id, role, created_at, updated_at, last_login, is_active\n        FROM users \n        WHERE id = ${payload.user_id} AND is_active = true\n      `;\n\n      if (!user) {\n        throw APIError.unauthenticated(\"User not found or inactive\");\n      }\n\n      // Get user's organization\n      const organization = await authDB.queryRow<Organization>`\n        SELECT id, name, created_at, updated_at FROM organizations WHERE id = ${user.org_id}\n      `;\n      \n      if (!organization) {\n        throw APIError.internal(\"User's organization not found\");\n      }\n\n      return { user, organization };\n\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      console.error(\"Session validation error:\", error);\n      throw APIError.unauthenticated(\"Invalid session\");\n    }\n  }\n);\n\n// Logout endpoint (invalidates session client-side)\nexport const logout = api<void, { success: boolean }>(\n  { expose: true, method: \"POST\", path: \"/api/v1/auth/logout\" },\n  async () => {\n    // Since we're using stateless JWTs, logout is primarily handled client-side\n    // by removing the tokens. In a production environment, you might want to\n    // implement a token blacklist for enhanced security.\n    \n    return { success: true };\n  }\n);", "import { api, APIError } from \"encore.dev/api\";\nimport { chatDB } from \"./db\";\nimport type { GetHistoryParams, GetHistoryResponse, ChatMessage } from \"./types\";\n\n// Retrieves the conversation history for a given session.\nexport const getHistory = api<GetHistoryParams, GetHistoryResponse>(\n  { expose: true, method: \"GET\", path: \"/api/v1/chat/history/:session_id\" },\n  async (params) => {\n    if (!params.session_id || !params.session_id.trim()) {\n      throw APIError.invalidArgument(\"Session ID is required\");\n    }\n\n    try {\n      const messages = await chatDB.queryAll<ChatMessage>`\n        SELECT id, session_id, content, role, created_at\n        FROM chat_messages\n        WHERE session_id = ${params.session_id}\n        ORDER BY created_at ASC\n      `;\n\n      return {\n        messages\n      };\n    } catch (error) {\n      console.error(\"Get history error:\", error);\n      throw APIError.internal(\"Failed to retrieve chat history\");\n    }\n  }\n);\n", "import { SQLDatabase } from \"encore.dev/storage/sqldb\";\n\nexport const chatDB = new SQLDatabase(\"chat\", {\n  migrations: \"./migrations\",\n});\n", "import { api, APIError } from \"encore.dev/api\";\nimport { chatDB } from \"./db\";\nimport type { SendMessageRequest, SendMessageResponse, ChatMessage, OpenAIMessage } from \"./types\";\nimport { callOpenAI } from \"./utils\";\n\n// Accepts a user's message and returns both the user message and AI response.\nexport const sendMessage = api<SendMessageRequest, SendMessageResponse>(\n  { expose: true, method: \"POST\", path: \"/api/v1/chat/message\" },\n  async (req) => {\n    if (!req.session_id || !req.session_id.trim()) {\n      throw APIError.invalidArgument(\"Session ID is required\");\n    }\n\n    if (!req.content || !req.content.trim()) {\n      throw APIError.invalidArgument(\"Message content is required\");\n    }\n\n    try {\n      // Save the user's message to the database\n      const userMessage = await chatDB.queryRow<ChatMessage>`\n        INSERT INTO chat_messages (session_id, content, role)\n        VALUES (${req.session_id}, ${req.content}, 'user')\n        RETURNING id, session_id, content, role, created_at\n      `;\n\n      if (!userMessage) {\n        throw APIError.internal(\"Failed to save user message\");\n      }\n\n      // Get recent conversation history for context (last 10 messages)\n      const recentMessages = await chatDB.queryAll<ChatMessage>`\n        SELECT id, session_id, content, role, created_at\n        FROM chat_messages\n        WHERE session_id = ${req.session_id}\n        ORDER BY created_at DESC\n        LIMIT 10\n      `;\n\n      // Reverse to get chronological order and convert to OpenAI format\n      const conversationHistory: OpenAIMessage[] = recentMessages\n        .reverse()\n        .map(msg => ({\n          role: msg.role as 'user' | 'assistant',\n          content: msg.content\n        }));\n\n      // Add system message for context\n      const messages: OpenAIMessage[] = [\n        {\n          role: 'system',\n          content: 'You are a helpful AI assistant in the War Room V2 chat system. Provide helpful, accurate, and engaging responses to user questions.'\n        },\n        ...conversationHistory\n      ];\n\n      // Get AI response\n      const aiResponseContent = await callOpenAI(messages);\n\n      // Save the AI response to the database\n      const aiMessage = await chatDB.queryRow<ChatMessage>`\n        INSERT INTO chat_messages (session_id, content, role)\n        VALUES (${req.session_id}, ${aiResponseContent}, 'assistant')\n        RETURNING id, session_id, content, role, created_at\n      `;\n\n      if (!aiMessage) {\n        throw APIError.internal(\"Failed to save AI response\");\n      }\n\n      return {\n        message: userMessage,\n        ai_response: aiMessage\n      };\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      console.error(\"Send message error:\", error);\n      throw APIError.internal(\"Failed to process message\");\n    }\n  }\n);\n", "import { secret } from \"encore.dev/config\";\nimport { APIError } from \"encore.dev/api\";\nimport type { OpenAIMessage } from \"./types\";\n\nconst openaiApiKey = secret(\"OPENAI_API_KEY\");\nconst dataMode = secret(\"DATA_MODE\");\n\nexport function isDataModeMock(): boolean {\n  return dataMode() === \"MOCK\";\n}\n\nexport async function callOpenAI(messages: OpenAIMessage[]): Promise<string> {\n  if (isDataModeMock()) {\n    return generateMockResponse(messages);\n  }\n\n  try {\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${openaiApiKey()}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-4\",\n        messages: messages,\n        max_tokens: 1000,\n        temperature: 0.7\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.choices[0]?.message?.content || \"I apologize, but I couldn't generate a response at this time.\";\n  } catch (error) {\n    console.error(\"OpenAI API call failed:\", error);\n    throw APIError.internal(\"Failed to generate AI response\");\n  }\n}\n\nfunction generateMockResponse(messages: OpenAIMessage[]): string {\n  const lastUserMessage = messages.filter(m => m.role === 'user').pop()?.content || \"\";\n  \n  // Generate contextual mock responses based on the user's message\n  if (lastUserMessage.toLowerCase().includes('hello') || lastUserMessage.toLowerCase().includes('hi')) {\n    return \"[MOCK MODE] Hello! I'm your AI assistant. I'm currently running in mock mode, so this is a test response. How can I help you today?\";\n  }\n  \n  if (lastUserMessage.toLowerCase().includes('weather')) {\n    return \"[MOCK MODE] I'd be happy to help with weather information! In mock mode, I can tell you it's a beautiful sunny day with 72°F. Remember, this is test data.\";\n  }\n  \n  if (lastUserMessage.toLowerCase().includes('help')) {\n    return \"[MOCK MODE] I'm here to assist you! This is a mock response demonstrating the chat functionality. In live mode, I would provide real AI-powered assistance.\";\n  }\n  \n  return `[MOCK MODE] Thank you for your message: \"${lastUserMessage}\". This is a mock AI response demonstrating the chat system functionality. In live mode, you would receive a real AI-generated response.`;\n}\n", "import { api, APIError } from \"encore.dev/api\";\nimport { googleAdsDB } from \"./db\";\nimport type { AuthCallbackRequest, AuthCallbackResponse } from \"./types\";\nimport { exchangeCodeForTokens, isDataModeMock } from \"./utils\";\n\n// Handles the OAuth2 callback and exchanges authorization code for tokens.\nexport const authCallback = api<AuthCallbackRequest, AuthCallbackResponse>(\n  { expose: true, method: \"POST\", path: \"/api/v1/google-ads/auth/callback\" },\n  async (req) => {\n    if (!req.code || !req.code.trim()) {\n      throw APIError.invalidArgument(\"Authorization code is required\");\n    }\n\n    if (!req.state || !req.state.trim()) {\n      throw APIError.invalidArgument(\"State parameter is required\");\n    }\n\n    if (!req.redirect_uri || !req.redirect_uri.trim()) {\n      throw APIError.invalidArgument(\"Redirect URI is required\");\n    }\n\n    try {\n      // Parse the state parameter to extract user_id and code_verifier\n      const stateData = JSON.parse(req.state);\n      const { user_id, code_verifier } = stateData;\n\n      if (!user_id || !code_verifier) {\n        throw APIError.invalidArgument(\"Invalid state parameter\");\n      }\n\n      if (isDataModeMock()) {\n        // In mock mode, simulate successful token storage\n        const mockExpiresAt = new Date(Date.now() + 3600 * 1000); // 1 hour from now\n        \n        await googleAdsDB.exec`\n          INSERT INTO oauth_tokens (user_id, access_token, refresh_token, expires_at, scope)\n          VALUES (${user_id}, 'mock_access_token', 'mock_refresh_token', ${mockExpiresAt}, 'https://www.googleapis.com/auth/adwords')\n          ON CONFLICT (user_id) \n          DO UPDATE SET \n            access_token = 'mock_access_token',\n            refresh_token = 'mock_refresh_token',\n            expires_at = ${mockExpiresAt},\n            scope = 'https://www.googleapis.com/auth/adwords',\n            updated_at = NOW()\n        `;\n\n        return {\n          success: true,\n          user_id\n        };\n      }\n\n      // Exchange authorization code for tokens\n      const tokenData = await exchangeCodeForTokens(req.code, req.redirect_uri, code_verifier);\n      const expiresAt = new Date(Date.now() + tokenData.expires_in * 1000);\n\n      // Store tokens in database\n      await googleAdsDB.exec`\n        INSERT INTO oauth_tokens (user_id, access_token, refresh_token, expires_at, scope)\n        VALUES (${user_id}, ${tokenData.access_token}, ${tokenData.refresh_token || null}, ${expiresAt}, ${tokenData.scope})\n        ON CONFLICT (user_id) \n        DO UPDATE SET \n          access_token = ${tokenData.access_token},\n          refresh_token = ${tokenData.refresh_token || null},\n          expires_at = ${expiresAt},\n          scope = ${tokenData.scope},\n          updated_at = NOW()\n      `;\n\n      return {\n        success: true,\n        user_id\n      };\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      console.error(\"OAuth callback error:\", error);\n      throw APIError.internal(\"Failed to complete OAuth flow\");\n    }\n  }\n);\n", "import { SQLDatabase } from \"encore.dev/storage/sqldb\";\n\nexport const googleAdsDB = new SQLDatabase(\"google_ads\", {\n  migrations: \"./migrations\",\n});\n", "import { secret } from \"encore.dev/config\";\nimport { APIError } from \"encore.dev/api\";\nimport { googleAdsDB } from \"./db\";\nimport type { OAuthToken, Campaign, PerformanceMetrics, CampaignInsights } from \"./types\";\nimport * as crypto from \"crypto\";\n\nconst googleAdsClientId = secret(\"GOOGLE_ADS_CLIENT_ID\");\nconst googleAdsClientSecret = secret(\"GOOGLE_ADS_CLIENT_SECRET\");\nconst dataMode = secret(\"DATA_MODE\");\n\nexport function isDataModeMock(): boolean {\n  return dataMode() === \"MOCK\";\n}\n\nexport function generateState(): string {\n  return crypto.randomBytes(32).toString('hex');\n}\n\nexport function generateCodeVerifier(): string {\n  return crypto.randomBytes(32).toString('base64url');\n}\n\nexport function generateCodeChallenge(verifier: string): string {\n  return crypto.createHash('sha256').update(verifier).digest('base64url');\n}\n\nexport function buildAuthUrl(redirectUri: string, state: string, codeChallenge: string): string {\n  const params = new URLSearchParams({\n    client_id: googleAdsClientId(),\n    redirect_uri: redirectUri,\n    scope: 'https://www.googleapis.com/auth/adwords',\n    response_type: 'code',\n    state: state,\n    access_type: 'offline',\n    prompt: 'consent',\n    code_challenge: codeChallenge,\n    code_challenge_method: 'S256'\n  });\n\n  return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n}\n\nexport async function exchangeCodeForTokens(code: string, redirectUri: string, codeVerifier: string): Promise<{\n  access_token: string;\n  refresh_token?: string;\n  expires_in: number;\n  scope: string;\n}> {\n  const response = await fetch('https://oauth2.googleapis.com/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: new URLSearchParams({\n      client_id: googleAdsClientId(),\n      client_secret: googleAdsClientSecret(),\n      code: code,\n      grant_type: 'authorization_code',\n      redirect_uri: redirectUri,\n      code_verifier: codeVerifier\n    })\n  });\n\n  if (!response.ok) {\n    throw APIError.internal(`OAuth token exchange failed: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  return data;\n}\n\nexport async function refreshAccessToken(refreshToken: string): Promise<{\n  access_token: string;\n  expires_in: number;\n}> {\n  const response = await fetch('https://oauth2.googleapis.com/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: new URLSearchParams({\n      client_id: googleAdsClientId(),\n      client_secret: googleAdsClientSecret(),\n      refresh_token: refreshToken,\n      grant_type: 'refresh_token'\n    })\n  });\n\n  if (!response.ok) {\n    throw APIError.internal(`Token refresh failed: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  return data;\n}\n\nexport async function getValidAccessToken(userId: string): Promise<string> {\n  if (isDataModeMock()) {\n    return 'mock_access_token';\n  }\n\n  const token = await googleAdsDB.queryRow<OAuthToken>`\n    SELECT * FROM oauth_tokens \n    WHERE user_id = ${userId} \n    ORDER BY created_at DESC \n    LIMIT 1\n  `;\n\n  if (!token) {\n    throw APIError.unauthenticated('No Google Ads authorization found. Please authorize first.');\n  }\n\n  // Check if token is expired\n  if (new Date() >= token.expires_at) {\n    if (!token.refresh_token) {\n      throw APIError.unauthenticated('Access token expired and no refresh token available. Please re-authorize.');\n    }\n\n    // Refresh the token\n    const refreshedData = await refreshAccessToken(token.refresh_token);\n    const newExpiresAt = new Date(Date.now() + refreshedData.expires_in * 1000);\n\n    await googleAdsDB.exec`\n      UPDATE oauth_tokens \n      SET access_token = ${refreshedData.access_token}, \n          expires_at = ${newExpiresAt},\n          updated_at = NOW()\n      WHERE id = ${token.id}\n    `;\n\n    return refreshedData.access_token;\n  }\n\n  return token.access_token;\n}\n\nexport async function makeGoogleAdsApiCall(\n  accessToken: string,\n  customerId: string,\n  query: string\n): Promise<any> {\n  if (isDataModeMock()) {\n    return getMockApiResponse(query);\n  }\n\n  const response = await fetch(`https://googleads.googleapis.com/v16/customers/${customerId}/googleAds:searchStream`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n      'developer-token': process.env.GOOGLE_ADS_DEVELOPER_TOKEN || '',\n    },\n    body: JSON.stringify({\n      query: query,\n      summaryRowSetting: 'WITH_SUMMARY_ROW'\n    })\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw APIError.internal(`Google Ads API call failed: ${response.status} ${errorText}`);\n  }\n\n  return response.json();\n}\n\nfunction getMockApiResponse(query: string): any {\n  if (query.includes('campaign.')) {\n    return {\n      results: [\n        {\n          campaign: {\n            resourceName: 'customers/1234567890/campaigns/111111',\n            id: '111111',\n            name: 'Search Campaign - Brand',\n            status: 'ENABLED',\n            advertisingChannelType: 'SEARCH',\n            startDate: '2024-01-01',\n            campaignBudget: 'customers/1234567890/campaignBudgets/222222'\n          },\n          campaignBudget: {\n            amountMicros: '50000000',\n            currencyCode: 'USD'\n          }\n        },\n        {\n          campaign: {\n            resourceName: 'customers/1234567890/campaigns/333333',\n            id: '333333',\n            name: 'Display Campaign - Awareness',\n            status: 'ENABLED',\n            advertisingChannelType: 'DISPLAY',\n            startDate: '2024-02-01',\n            campaignBudget: 'customers/1234567890/campaignBudgets/444444'\n          },\n          campaignBudget: {\n            amountMicros: '30000000',\n            currencyCode: 'USD'\n          }\n        }\n      ]\n    };\n  }\n\n  if (query.includes('metrics.')) {\n    return {\n      results: [\n        {\n          campaign: {\n            id: '111111',\n            name: 'Search Campaign - Brand'\n          },\n          metrics: {\n            impressions: '15000',\n            clicks: '1200',\n            costMicros: '8500000',\n            conversions: 85.5,\n            conversionValue: 12750.50,\n            ctr: 0.08,\n            averageCpc: '7083333'\n          }\n        },\n        {\n          campaign: {\n            id: '333333',\n            name: 'Display Campaign - Awareness'\n          },\n          metrics: {\n            impressions: '50000',\n            clicks: '750',\n            costMicros: '5200000',\n            conversions: 45.2,\n            conversionValue: 6780.30,\n            ctr: 0.015,\n            averageCpc: '6933333'\n          }\n        }\n      ]\n    };\n  }\n\n  return { results: [] };\n}\n\nexport async function getCachedData(cacheKey: string): Promise<any | null> {\n  const cached = await googleAdsDB.queryRow<{data: any}>`\n    SELECT data FROM performance_cache \n    WHERE cache_key = ${cacheKey} AND expires_at > NOW()\n  `;\n\n  return cached?.data || null;\n}\n\nexport async function setCachedData(cacheKey: string, data: any, ttlMinutes: number = 15): Promise<void> {\n  const expiresAt = new Date(Date.now() + ttlMinutes * 60 * 1000);\n  \n  await googleAdsDB.exec`\n    INSERT INTO performance_cache (cache_key, data, expires_at)\n    VALUES (${cacheKey}, ${JSON.stringify(data)}, ${expiresAt})\n    ON CONFLICT (cache_key) \n    DO UPDATE SET \n      data = ${JSON.stringify(data)},\n      expires_at = ${expiresAt},\n      created_at = NOW()\n  `;\n}\n\nexport function generateMockCampaigns(): Campaign[] {\n  return [\n    {\n      id: '111111',\n      name: 'Search Campaign - Brand',\n      status: 'ENABLED',\n      budget_amount_micros: 50000000,\n      currency_code: 'USD',\n      start_date: '2024-01-01',\n      advertising_channel_type: 'SEARCH',\n      created_at: new Date('2024-01-01T00:00:00Z')\n    },\n    {\n      id: '333333',\n      name: 'Display Campaign - Awareness',\n      status: 'ENABLED',\n      budget_amount_micros: 30000000,\n      currency_code: 'USD',\n      start_date: '2024-02-01',\n      advertising_channel_type: 'DISPLAY',\n      created_at: new Date('2024-02-01T00:00:00Z')\n    },\n    {\n      id: '555555',\n      name: 'Shopping Campaign - Products',\n      status: 'PAUSED',\n      budget_amount_micros: 75000000,\n      currency_code: 'USD',\n      start_date: '2024-01-15',\n      end_date: '2024-12-31',\n      advertising_channel_type: 'SHOPPING',\n      created_at: new Date('2024-01-15T00:00:00Z')\n    }\n  ];\n}\n\nexport function generateMockPerformanceMetrics(): PerformanceMetrics[] {\n  return [\n    {\n      campaign_id: '111111',\n      campaign_name: 'Search Campaign - Brand',\n      impressions: 15000,\n      clicks: 1200,\n      cost_micros: 8500000,\n      conversions: 85.5,\n      conversion_value: 12750.50,\n      ctr: 0.08,\n      cpc_micros: 7083333,\n      cost_per_conversion: 99.42,\n      date_range: {\n        start_date: '2024-01-01',\n        end_date: '2024-01-31'\n      }\n    },\n    {\n      campaign_id: '333333',\n      campaign_name: 'Display Campaign - Awareness',\n      impressions: 50000,\n      clicks: 750,\n      cost_micros: 5200000,\n      conversions: 45.2,\n      conversion_value: 6780.30,\n      ctr: 0.015,\n      cpc_micros: 6933333,\n      cost_per_conversion: 115.04,\n      date_range: {\n        start_date: '2024-02-01',\n        end_date: '2024-02-29'\n      }\n    },\n    {\n      campaign_id: '555555',\n      campaign_name: 'Shopping Campaign - Products',\n      impressions: 25000,\n      clicks: 1800,\n      cost_micros: 12000000,\n      conversions: 120.8,\n      conversion_value: 24160.00,\n      ctr: 0.072,\n      cpc_micros: 6666667,\n      cost_per_conversion: 99.34,\n      date_range: {\n        start_date: '2024-01-15',\n        end_date: '2024-02-15'\n      }\n    }\n  ];\n}\n\nexport function generateMockInsights(): CampaignInsights[] {\n  return [\n    {\n      campaign_id: '111111',\n      campaign_name: 'Search Campaign - Brand',\n      quality_score_avg: 8.2,\n      search_impression_share: 0.75,\n      search_lost_impression_share_budget: 0.15,\n      search_lost_impression_share_rank: 0.10,\n      top_keywords: [\n        { keyword: 'brand name', impressions: 5000, clicks: 400, cost_micros: 3000000 },\n        { keyword: 'company brand', impressions: 3500, clicks: 280, cost_micros: 2100000 },\n        { keyword: 'brand products', impressions: 2800, clicks: 224, cost_micros: 1680000 }\n      ],\n      device_performance: [\n        { device: 'DESKTOP', impressions: 7500, clicks: 600, cost_micros: 4250000 },\n        { device: 'MOBILE', impressions: 6000, clicks: 480, cost_micros: 3400000 },\n        { device: 'TABLET', impressions: 1500, clicks: 120, cost_micros: 850000 }\n      ]\n    },\n    {\n      campaign_id: '333333',\n      campaign_name: 'Display Campaign - Awareness',\n      quality_score_avg: 6.8,\n      search_impression_share: 0.0,\n      search_lost_impression_share_budget: 0.0,\n      search_lost_impression_share_rank: 0.0,\n      top_keywords: [],\n      device_performance: [\n        { device: 'DESKTOP', impressions: 20000, clicks: 300, cost_micros: 2080000 },\n        { device: 'MOBILE', impressions: 25000, clicks: 375, cost_micros: 2600000 },\n        { device: 'TABLET', impressions: 5000, clicks: 75, cost_micros: 520000 }\n      ]\n    },\n    {\n      campaign_id: '555555',\n      campaign_name: 'Shopping Campaign - Products',\n      quality_score_avg: 7.5,\n      search_impression_share: 0.65,\n      search_lost_impression_share_budget: 0.25,\n      search_lost_impression_share_rank: 0.10,\n      top_keywords: [\n        { keyword: 'product category a', impressions: 8000, clicks: 640, cost_micros: 4800000 },\n        { keyword: 'specific product b', impressions: 6500, clicks: 520, cost_micros: 3900000 },\n        { keyword: 'brand product c', impressions: 5200, clicks: 416, cost_micros: 3120000 }\n      ],\n      device_performance: [\n        { device: 'DESKTOP', impressions: 10000, clicks: 800, cost_micros: 6000000 },\n        { device: 'MOBILE', impressions: 12000, clicks: 960, cost_micros: 7200000 },\n        { device: 'TABLET', impressions: 3000, clicks: 240, cost_micros: 1800000 }\n      ]\n    }\n  ];\n}\n", "import { api, APIError } from \"encore.dev/api\";\nimport type { AuthStartRequest, AuthStartResponse } from \"./types\";\nimport { generateState, generateCodeVerifier, generateCodeChallenge, buildAuthUrl } from \"./utils\";\n\n// Initiates the OAuth2 PKCE flow for Google Ads authorization.\nexport const authStart = api<AuthStartRequest, AuthStartResponse>(\n  { expose: true, method: \"POST\", path: \"/api/v1/google-ads/auth/start\" },\n  async (req) => {\n    if (!req.user_id || !req.user_id.trim()) {\n      throw APIError.invalidArgument(\"User ID is required\");\n    }\n\n    if (!req.redirect_uri || !req.redirect_uri.trim()) {\n      throw APIError.invalidArgument(\"Redirect URI is required\");\n    }\n\n    try {\n      const state = generateState();\n      const codeVerifier = generateCodeVerifier();\n      const codeChallenge = generateCodeChallenge(codeVerifier);\n\n      // In a production environment, you would store the state and code_verifier\n      // associated with the user_id in a temporary store (Redis, database, etc.)\n      // For this example, we'll include them in the state parameter\n      const stateWithData = JSON.stringify({\n        state,\n        user_id: req.user_id,\n        code_verifier: codeVerifier\n      });\n\n      const authorizationUrl = buildAuthUrl(req.redirect_uri, stateWithData, codeChallenge);\n\n      return {\n        authorization_url: authorizationUrl,\n        state: stateWithData\n      };\n    } catch (error) {\n      console.error(\"OAuth start error:\", error);\n      throw APIError.internal(\"Failed to initiate OAuth flow\");\n    }\n  }\n);\n", "import { api, APIError } from \"encore.dev/api\";\nimport { Query } from \"encore.dev/api\";\nimport type { GetInsightsResponse, CampaignInsights } from \"./types\";\nimport { \n  getValidAccessToken, \n  makeGoogleAdsApiCall, \n  isDataModeMock, \n  generateMockInsights,\n  getCachedData,\n  setCachedData \n} from \"./utils\";\n\ninterface GetInsightsParams {\n  user_id: Query<string>;\n  customer_id?: Query<string>;\n  campaign_ids?: Query<string>;\n}\n\n// Retrieves campaign insights and analytics with caching.\nexport const getInsights = api<GetInsightsParams, GetInsightsResponse>(\n  { expose: true, method: \"GET\", path: \"/api/v1/google-ads/insights\" },\n  async (params) => {\n    if (!params.user_id) {\n      throw APIError.invalidArgument(\"User ID is required\");\n    }\n\n    try {\n      const campaignIds = params.campaign_ids ? params.campaign_ids.split(',') : [];\n\n      if (isDataModeMock()) {\n        const mockInsights = generateMockInsights();\n        const filteredInsights = campaignIds.length > 0 \n          ? mockInsights.filter(i => campaignIds.includes(i.campaign_id))\n          : mockInsights;\n\n        return {\n          insights: filteredInsights\n        };\n      }\n\n      if (!params.customer_id) {\n        throw APIError.invalidArgument(\"Customer ID is required for live mode\");\n      }\n\n      // Check cache first\n      const cacheKey = `insights_${params.customer_id}_${campaignIds.join(',')}`;\n      const cachedData = await getCachedData(cacheKey);\n      if (cachedData) {\n        return cachedData;\n      }\n\n      const accessToken = await getValidAccessToken(params.user_id);\n\n      let campaignFilter = '';\n      if (campaignIds.length > 0) {\n        const campaignList = campaignIds.map(id => `'${id}'`).join(',');\n        campaignFilter = `AND campaign.id IN (${campaignList})`;\n      }\n\n      // Get quality score and impression share data\n      const qualityScoreQuery = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          metrics.quality_score,\n          metrics.search_impression_share,\n          metrics.search_lost_impression_share_budget,\n          metrics.search_lost_impression_share_rank\n        FROM campaign \n        WHERE campaign.status != 'REMOVED'\n        ${campaignFilter}\n        ORDER BY campaign.name\n      `;\n\n      // Get keyword performance data\n      const keywordQuery = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          ad_group_criterion.keyword.text,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros\n        FROM keyword_view \n        WHERE campaign.status != 'REMOVED'\n        ${campaignFilter}\n        ORDER BY metrics.impressions DESC\n        LIMIT 100\n      `;\n\n      // Get device performance data\n      const deviceQuery = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          segments.device,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros\n        FROM campaign \n        WHERE campaign.status != 'REMOVED'\n        ${campaignFilter}\n        ORDER BY campaign.name, segments.device\n      `;\n\n      const [qualityResponse, keywordResponse, deviceResponse] = await Promise.all([\n        makeGoogleAdsApiCall(accessToken, params.customer_id, qualityScoreQuery),\n        makeGoogleAdsApiCall(accessToken, params.customer_id, keywordQuery),\n        makeGoogleAdsApiCall(accessToken, params.customer_id, deviceQuery)\n      ]);\n\n      // Process and combine the data\n      const insights: CampaignInsights[] = qualityResponse.results.map((result: any) => {\n        const campaignId = result.campaign.id;\n        \n        // Find keywords for this campaign\n        const campaignKeywords = keywordResponse.results\n          .filter((kw: any) => kw.campaign.id === campaignId)\n          .slice(0, 10)\n          .map((kw: any) => ({\n            keyword: kw.adGroupCriterion?.keyword?.text || 'N/A',\n            impressions: parseInt(kw.metrics?.impressions || '0'),\n            clicks: parseInt(kw.metrics?.clicks || '0'),\n            cost_micros: parseInt(kw.metrics?.costMicros || '0')\n          }));\n\n        // Find device performance for this campaign\n        const campaignDevices = deviceResponse.results\n          .filter((dev: any) => dev.campaign.id === campaignId)\n          .map((dev: any) => ({\n            device: dev.segments?.device || 'UNKNOWN',\n            impressions: parseInt(dev.metrics?.impressions || '0'),\n            clicks: parseInt(dev.metrics?.clicks || '0'),\n            cost_micros: parseInt(dev.metrics?.costMicros || '0')\n          }));\n\n        return {\n          campaign_id: campaignId,\n          campaign_name: result.campaign.name,\n          quality_score_avg: parseFloat(result.metrics?.qualityScore || '0'),\n          search_impression_share: parseFloat(result.metrics?.searchImpressionShare || '0'),\n          search_lost_impression_share_budget: parseFloat(result.metrics?.searchLostImpressionShareBudget || '0'),\n          search_lost_impression_share_rank: parseFloat(result.metrics?.searchLostImpressionShareRank || '0'),\n          top_keywords: campaignKeywords,\n          device_performance: campaignDevices\n        };\n      });\n\n      const responseData = {\n        insights\n      };\n\n      // Cache the response for 15 minutes\n      await setCachedData(cacheKey, responseData, 15);\n\n      return responseData;\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      console.error(\"Get insights error:\", error);\n      throw APIError.internal(\"Failed to retrieve campaign insights\");\n    }\n  }\n);\n", "import { api, APIError } from \"encore.dev/api\";\nimport { Query } from \"encore.dev/api\";\nimport type { GetPerformanceResponse, PerformanceMetrics } from \"./types\";\nimport { \n  getValidAccessToken, \n  makeGoogleAdsApiCall, \n  isDataModeMock, \n  generateMockPerformanceMetrics,\n  getCachedData,\n  setCachedData \n} from \"./utils\";\n\ninterface GetPerformanceParams {\n  user_id: Query<string>;\n  customer_id?: Query<string>;\n  start_date?: Query<string>;\n  end_date?: Query<string>;\n  campaign_ids?: Query<string>;\n}\n\n// Retrieves campaign performance metrics with caching.\nexport const getPerformance = api<GetPerformanceParams, GetPerformanceResponse>(\n  { expose: true, method: \"GET\", path: \"/api/v1/google-ads/performance\" },\n  async (params) => {\n    if (!params.user_id) {\n      throw APIError.invalidArgument(\"User ID is required\");\n    }\n\n    try {\n      const startDate = params.start_date || '2024-01-01';\n      const endDate = params.end_date || new Date().toISOString().split('T')[0];\n      const campaignIds = params.campaign_ids ? params.campaign_ids.split(',') : [];\n\n      if (isDataModeMock()) {\n        const mockMetrics = generateMockPerformanceMetrics();\n        const filteredMetrics = campaignIds.length > 0 \n          ? mockMetrics.filter(m => campaignIds.includes(m.campaign_id))\n          : mockMetrics;\n\n        const summary = calculateSummary(filteredMetrics);\n\n        return {\n          metrics: filteredMetrics,\n          summary\n        };\n      }\n\n      if (!params.customer_id) {\n        throw APIError.invalidArgument(\"Customer ID is required for live mode\");\n      }\n\n      // Check cache first\n      const cacheKey = `performance_${params.customer_id}_${startDate}_${endDate}_${campaignIds.join(',')}`;\n      const cachedData = await getCachedData(cacheKey);\n      if (cachedData) {\n        return cachedData;\n      }\n\n      const accessToken = await getValidAccessToken(params.user_id);\n\n      let campaignFilter = '';\n      if (campaignIds.length > 0) {\n        const campaignList = campaignIds.map(id => `'${id}'`).join(',');\n        campaignFilter = `AND campaign.id IN (${campaignList})`;\n      }\n\n      const query = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          metrics.conversions_value,\n          metrics.ctr,\n          metrics.average_cpc\n        FROM campaign \n        WHERE segments.date BETWEEN '${startDate}' AND '${endDate}'\n        AND campaign.status != 'REMOVED'\n        ${campaignFilter}\n        ORDER BY campaign.name\n      `;\n\n      const response = await makeGoogleAdsApiCall(accessToken, params.customer_id, query);\n\n      const metrics: PerformanceMetrics[] = response.results.map((result: any) => ({\n        campaign_id: result.campaign.id,\n        campaign_name: result.campaign.name,\n        impressions: parseInt(result.metrics.impressions || '0'),\n        clicks: parseInt(result.metrics.clicks || '0'),\n        cost_micros: parseInt(result.metrics.costMicros || '0'),\n        conversions: parseFloat(result.metrics.conversions || '0'),\n        conversion_value: parseFloat(result.metrics.conversionsValue || '0'),\n        ctr: parseFloat(result.metrics.ctr || '0'),\n        cpc_micros: parseInt(result.metrics.averageCpc || '0'),\n        cost_per_conversion: result.metrics.conversions > 0 \n          ? parseInt(result.metrics.costMicros || '0') / 1000000 / parseFloat(result.metrics.conversions)\n          : 0,\n        date_range: {\n          start_date: startDate,\n          end_date: endDate\n        }\n      }));\n\n      const summary = calculateSummary(metrics);\n\n      const responseData = {\n        metrics,\n        summary\n      };\n\n      // Cache the response for 15 minutes\n      await setCachedData(cacheKey, responseData, 15);\n\n      return responseData;\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      console.error(\"Get performance error:\", error);\n      throw APIError.internal(\"Failed to retrieve performance metrics\");\n    }\n  }\n);\n\nfunction calculateSummary(metrics: PerformanceMetrics[]) {\n  const totalImpressions = metrics.reduce((sum, m) => sum + m.impressions, 0);\n  const totalClicks = metrics.reduce((sum, m) => sum + m.clicks, 0);\n  const totalCostMicros = metrics.reduce((sum, m) => sum + m.cost_micros, 0);\n  const totalConversions = metrics.reduce((sum, m) => sum + m.conversions, 0);\n\n  return {\n    total_impressions: totalImpressions,\n    total_clicks: totalClicks,\n    total_cost_micros: totalCostMicros,\n    total_conversions: totalConversions,\n    average_ctr: totalImpressions > 0 ? totalClicks / totalImpressions : 0,\n    average_cpc_micros: totalClicks > 0 ? totalCostMicros / totalClicks : 0\n  };\n}\n", "import { api, APIError } from \"encore.dev/api\";\nimport { Query } from \"encore.dev/api\";\nimport type { ListCampaignsResponse, Campaign } from \"./types\";\nimport { getValidAccessToken, makeGoogleAdsApiCall, isDataModeMock, generateMockCampaigns } from \"./utils\";\n\ninterface ListCampaignsParams {\n  user_id: Query<string>;\n  customer_id?: Query<string>;\n}\n\n// Lists all Google Ads campaigns for the authenticated user.\nexport const listCampaigns = api<ListCampaignsParams, ListCampaignsResponse>(\n  { expose: true, method: \"GET\", path: \"/api/v1/google-ads/campaigns\" },\n  async (params) => {\n    if (!params.user_id) {\n      throw APIError.invalidArgument(\"User ID is required\");\n    }\n\n    try {\n      if (isDataModeMock()) {\n        const mockCampaigns = generateMockCampaigns();\n        return {\n          campaigns: mockCampaigns,\n          total_count: mockCampaigns.length\n        };\n      }\n\n      if (!params.customer_id) {\n        throw APIError.invalidArgument(\"Customer ID is required for live mode\");\n      }\n\n      const accessToken = await getValidAccessToken(params.user_id);\n\n      const query = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          campaign.status,\n          campaign.start_date,\n          campaign.end_date,\n          campaign.advertising_channel_type,\n          campaign.resource_name,\n          campaign_budget.amount_micros,\n          campaign_budget.currency_code\n        FROM campaign \n        WHERE campaign.status != 'REMOVED'\n        ORDER BY campaign.name\n      `;\n\n      const response = await makeGoogleAdsApiCall(accessToken, params.customer_id, query);\n\n      const campaigns: Campaign[] = response.results.map((result: any) => ({\n        id: result.campaign.id,\n        name: result.campaign.name,\n        status: result.campaign.status,\n        budget_amount_micros: parseInt(result.campaignBudget?.amountMicros || '0'),\n        currency_code: result.campaignBudget?.currencyCode || 'USD',\n        start_date: result.campaign.startDate,\n        end_date: result.campaign.endDate,\n        advertising_channel_type: result.campaign.advertisingChannelType,\n        created_at: new Date() // Google Ads API doesn't provide creation date directly\n      }));\n\n      return {\n        campaigns,\n        total_count: campaigns.length\n      };\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      console.error(\"List campaigns error:\", error);\n      throw APIError.internal(\"Failed to retrieve campaigns\");\n    }\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { secret } from \"encore.dev/config\";\n\nconst dataMode = secret(\"DATA_MODE\");\n\ninterface HealthResponse {\n  status: string;\n  data_mode: string;\n}\n\n// Returns the health status of the application with current data mode.\nexport const health = api<void, HealthResponse>(\n  { expose: true, method: \"GET\", path: \"/api/v1/health\" },\n  async () => {\n    return {\n      status: \"ok\",\n      data_mode: dataMode() || \"MOCK\"\n    };\n  }\n);\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"chat\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"auth\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"google-ads\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"health\");\n"],
  "mappings": "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",
  "names": ["APIError", "APIError", "user", "organization", "accessToken", "refreshToken", "api", "APIError", "api", "APIError", "api", "APIError", "api", "APIError", "user", "organization", "accessToken", "refreshToken", "api", "APIError", "api", "APIError", "api", "APIError", "api", "APIError", "user", "organization", "api", "APIError", "SQLDatabase", "api", "APIError", "api", "APIError", "secret", "APIError", "dataMode", "isDataModeMock", "api", "APIError", "api", "APIError", "SQLDatabase", "secret", "APIError", "crypto", "secret", "dataMode", "isDataModeMock", "APIError", "api", "APIError", "isDataModeMock", "api", "APIError", "api", "APIError", "api", "APIError", "api", "APIError", "isDataModeMock", "api", "APIError", "api", "APIError", "isDataModeMock", "summary", "api", "APIError", "api", "APIError", "isDataModeMock", "api", "secret", "dataMode", "Service", "encore_service_default", "Service", "encore_service_default", "Service", "encore_service_default", "encore_service_default"]
}
